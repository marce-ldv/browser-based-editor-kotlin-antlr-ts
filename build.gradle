buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        // antlr("org.antlr:antlr4:4.5")
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
}

apply plugin: 'kotlin'
apply plugin: 'application'

group 'com.example'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
}

ext.ktor_version = "1.2.3"

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'org.jetbrains.kotlin:kotlin-test-junit'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"
    runtime 'org.antlr:antlr4:4.7.2'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }


task generateLexer(type:JavaExec) {
    def lexerName = "CalcLexer"
    inputs.file("$ANTLR_SRC/${lexerName}.g4")
    outputs.file("$GEN_JS_SRC/${lexerName}.js")
    outputs.file("$GEN_JS_SRC/${lexerName}.interp")
    outputs.file("$GEN_JS_SRC/${lexerName}.tokens")
    main = 'org.antlr.v4.Tool'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-Dlanguage=JavaScript', "${lexerName}.g4", '-o', '../../main-generated/javascript']
    workingDir = ANTLR_SRC
}
task generateParser(type:JavaExec) {
    dependsOn generateLexer
    def lexerName = "CalcLexer"
    def parserName = "CalcParser"
    inputs.file("$ANTLR_SRC/${parserName}.g4")
    inputs.file("$GEN_JS_SRC/${lexerName}.tokens")
    outputs.file("$GEN_JS_SRC/${parserName}.js")
    outputs.file("$GEN_JS_SRC/${parserName}.interp")
    outputs.file("$GEN_JS_SRC/${parserName}.tokens")
    main = 'org.antlr.v4.Tool'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-Dlanguage=JavaScript', "${parserName}.g4", '-no-listener', '-no-visitor', '-o', '../../main-generated/javascript']
    workingDir = ANTLR_SRC
}

task runServer(type:JavaExec) {
    main = 'com.strumenta.simpleserver.MainKt'
    classpath = sourceSets.main.runtimeClasspath
    args = ['8888']
}
